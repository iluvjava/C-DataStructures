<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyDatastructure</name>
    </assembly>
    <members>
        <member name="T:MyDatastructure.Maps.IMap`2">
            <summary>
            An interface for my own set implementation.
            <para>
            Whether it handles null key depends on implementations. 
            </para>
            </summary>
        </member>
        <member name="P:MyDatastructure.Maps.IMap`2.Item(`0)">
            <summary>
            No such key excpetion!
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.Maps.IMap`2.Remove(`0)">
            <summary>
            Removes the key and return the value of the key.
            </summary>
            <param name="key"></param>
            <returns>
            null is returned if the key is not in the map, null returned
            doesn't always mean the key is not in the map.
            </returns>
        </member>
        <member name="M:MyDatastructure.Maps.IMap`2.ContainsKey(`0)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <returns>
            
             </returns>
        </member>
        <member name="T:MyDatastructure.Maps.SysDefaultMap`2">
             <summary>
             Uses the system default Idictionary for the implementation for IMap.
            
             </summary>
             <typeparam name="K"></typeparam>
             <typeparam name="V"></typeparam>
        </member>
        <member name="T:MyDatastructure.PriorityQueue.FancierBinaryHeap`1">
             <summary>
             Simple binary heap that uses a hash map to keep track of the element
             <para>
             Doesn't support repeating element in the heap.
             </para>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="F:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.IndexMap">
            <summary>
            maps the object to index in the heap array.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.#ctor">
            <summary>
            Create an Fancier Binary Min Heap.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.#ctor(System.Boolean)">
            <summary>
            Creates a fancier binary heap, with the specified ordering of the elements.
            </summary>
            <param name="asc">
            True for min heap, false for max heap.
            </param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Floyd Build Heap on this.
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
            <param name="len"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.Contains(`0)">
            <summary>
            True if the element is in the heap. else, false.
            </summary>
            <param name="arg">
            An instance of type T.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.Enqueue(`0)">
            <summary>
            you cannot add duplicated element to the heap.
            </summary>
            <param name="arg">
            An non null instance of the type of T element.
            </param>
            <exception cref="T:MyDatastructure.InvalidArgumentException">
            Thrown when attempting to enqueue null element or repeated element.
            </exception>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.Remove(`0)">
            <summary>
            Remove an element of type T from thea queue; null is ok.
            <para>
            If element is not there, it will just ignore it and continues.
            </para>
            <para>
            If the queue is empty, then it will just skip it.
            </para>
            </summary>
            <param name="arg">
            An instance of the type T element.
            </param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.RemoveMin">
            <summary>
            Remoe the minimum element from the heap.
            </summary>
            <returns>
            The min element in the queue.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when trying to RemoveMin when the queue is empty.
            </exception>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.FancierBinaryHeap`1.Swap(System.Int32,System.Int32)">
            <summary>
            Internal use, for swapping element in the array heap.
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1">
            <summary>
            This will be the simplest Binary Heap imaginable, Min or Max.
            0 index will be a dummy;
            Null is not a accepted value;
            Repeated elements are ok;
            <para>Doesn't support remove and contain operations. </para>
            <para>
            Virtual keywords are used for the public members in the class for easier extension.
            </para>
            </summary>
        </member>
        <member name="F:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.AscendingOrder">
            <summary>
            A boolean to indicated the ordering.
            </summary>
        </member>
        <member name="F:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.ElementCount">
            <summary>
            The number of total element in the array.
            </summary>
        </member>
        <member name="F:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.HeapArray">
            <summary>
            index 0 is dummy.
            </summary>
        </member>
        <member name="P:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Size">
            <summary>
            Getter method for getting size of the heap.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.#ctor">
            <summary>
            Get an instance of the Binary Heap.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.#ctor(System.Boolean)">
            <summary>
            Instanciate an instance of Binary heap, a boolean to indicate prefered odering.
            </summary>
            <param name="ascending">
            True: Ascending order; False: Descending order.
            </param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            Give an array of element it will build the heap from it.
            It will copy the array.
            <remark>
            It uses floyd build heap, good for partial sort.
            </remark>
            </summary>
            <param name="source">
            The list should not comtain null, it will blows up if it contains
            null.
            </param>
            <param name="offset">
            Where you want to start add element from the array to the heap.
            Invalid argument will be set to 0.
            It's default to be 0.
            </param>
            <param name="len">
            The length you want off from the offset you set.
            </param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.IsNull(System.Object)">
            <summary>
            Internal method for checking the reference of object is null or not. (Kinda uneccesary...)
            </summary>
            <param name="o">
            Reference to any object.
            \</param>
            <returns>
            True if it's null.
            </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Contains(`0)">
            <summary>
            Not supported for this class.
            </summary>
            <param name="arg">
            Any instance of the type T.
            </param>
            <returns>
            True if it's in the queue, else false.
            </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Enqueue(`0)">
            <summary>
            add a new element into the queue.
            </summary>
            <param name="arg">
            Non null instance of the type T.
            </param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Peek">
            <summary>
            Returns an reference to the smallest element in the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.RemoveMin">
            <summary>
            Remove the minimum element from the queue.
            </summary>
            <throw>
            InvalidOperationException is the heap is empty when
            trying to remove elements.
            </throw>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.AutomaticResize">
            <summary>
            Internal method for resizing the heap array in the object.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Compare(`0,`0)">
            <summary>
            Take in account into the settings of the heap to compare the
            element.
            <code>
            a.CompareTo(b) if ascending
            - a.CompareTo(b) if descending.
            </code>
            </summary>
            <param name="a">
            an element
            </param>
            <param name="b">
            another element</param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.GetFirstChildIndex(System.Int32)">
            <summary>
            Given any index, it will return the index of where the first child of the element
            will be in.
            </summary>
            <param name="arg">
            index of the node you are currently looking at.
            </param>
            <returns>
            Index of it's left child; in the heap.
            </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.GetParentIndex(System.Int32)">
             <summary>
            Return the index of where the parent of the given node is at.
             </summary>
             <param name="arg">
             Index of the node you are looking at.
             </param>
             <returns>
             The index of where to look for the parent node.
             </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Percolate(System.Int32)">
            <summary>
            Internal method, if either percolate the node up, or it percolate the element down.
            </summary>
            <param name="arg">
            The index of the element you want to percolate.
            </param>
            <returns>
            The index of where the element finally ended up.
            </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.PercolateDown(System.Int32)">
            <summary>
            Percolate the element down and move the smallest children up to where the parent is at.
            </summary>
            <param name="arg">
            The index of the where the elenet you want to percolate down.
            </param>
            <returns>
            Where the index of the node finally ended up with.
            </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.PercolateUp(System.Int32)">
            <summary>
            Percolate the element up the heap, if it's smaller than the parent
            <para>Internal use only. </para>
            </summary>
            <param name="arg">
            Index of the element you want to percolate up.
            </param>
            <returns>
            The index where it finally ended up with.
            </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Swap(System.Int32,System.Int32)">
            <summary>
            Give index of 2 elements, it will swap those 2 elements in the heap array.
            </summary>
            <param name="arg1">
            First index.
            </param>
            <param name="arg2">
            Another index.
            </param>
        </member>
        <member name="T:MyDatastructure.PriorityQueue.BinomialHeap`1">
            <summary>
            This is the major class for the Binomial heap.
            - it has a forest of hatinary tree in it.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MyDatastructure.PriorityQueue.BinomialHeap`1.Forest">
            <summary>
            Array of Hatinary tree.
            </summary>
        </member>
        <member name="P:MyDatastructure.PriorityQueue.BinomialHeap`1.Size">
             <summary>
            
             </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BinomialHeap`1.Contains(`0)">
             <summary>
             Returns a bool representing if the element is presented in the queue.
             </summary>
             <param name="arg">
             Type T arg, null will be false always.
             </param>
             <returns>
            
             </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BinomialHeap`1.Enqueue(`0)">
            <summary>
            Add an element to the queue
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BinomialHeap`1.Peek">
            <summary>
            Returns a reference to the smallest element in the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BinomialHeap`1.Remove(`0)">
            <summary>
            Unsoported operation.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BinomialHeap`1.RemoveMin">
            <summary>
            Remove the minimum element from the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BinomialHeap`1.MergeHeaps(MyDatastructure.PriorityQueue.BinomialHeap{`0})">
            <summary>
            Merges the rhs(righthandside) of the tree, the rhs will becompe an empty and unusable
            heap after the merge, the referece "this" will be come the new tree.
            </summary>
        </member>
        <member name="T:MyDatastructure.PriorityQueue.BNode`1">
            <summary>
            Binary Node.
            </summary>
            <typeparam name="T">Any Type</typeparam>
        </member>
        <member name="P:MyDatastructure.PriorityQueue.BNode`1.Data">
            <summary>
            Type T data ths is stored in the node.
            </summary>
        </member>
        <member name="P:MyDatastructure.PriorityQueue.BNode`1.LeftChild">
            <summary>
            Visiting Children at that level.
            </summary>
        </member>
        <member name="P:MyDatastructure.PriorityQueue.BNode`1.RightChild">
            <summary>
            Go down in the level of the Binomial Tree.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BNode`1.#ctor(`0,MyDatastructure.PriorityQueue.BNode{`0},MyDatastructure.PriorityQueue.BNode{`0})">
            <summary>
            Construct a Binary Node, with data, left child and right child.
            </summary>
            <param name="data">
            Nullable
            </param>
            <param name="l">
            BNode of the same type. left child.
            </param>
            <param name="r">
            BNode of the same type, right child.
            </param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BNode`1.ToString">
            <summary>
            [&lt;node &gt;:[left tree] ,[rightree]]
            if empty, then the element will not be there.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.BNode`1.GetStringRepresentation(System.Text.StringBuilder)">
            <summary>
            A helper method for fast string concatenation.
            </summary>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="T:MyDatastructure.PriorityQueue.HatinaryTree`1">
            <summary>
            A representation of the abstract Binomial tree.
            ! Cannot accept null element.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:MyDatastructure.PriorityQueue.HatinaryTree`1.Rank">
            <summary>
            Represents the rank of the binomial tree.
            </summary>
        </member>
        <member name="P:MyDatastructure.PriorityQueue.HatinaryTree`1.Hat">
            <summary>
            The smallest element, top node of the binomial tree.
            </summary>
        </member>
        <member name="P:MyDatastructure.PriorityQueue.HatinaryTree`1.Root">
            <summary>
            Root of an ordinary binary tree.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.HatinaryTree`1.#ctor(`0)">
            <summary>
            Construct B_0 Binomial tree.
            ! : Cannot put null into it.
            </summary>
            <param name="data">
            Type T data, cannot be null.
            </param>
            <exception cref="T:MyDatastructure.InvalidArgumentException">
            data is null.
            </exception>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.HatinaryTree`1.#ctor">
            <summary>
            Interal use only.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.HatinaryTree`1.#ctor(MyDatastructure.PriorityQueue.BNode{`0},MyDatastructure.PriorityQueue.BNode{`0})">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.HatinaryTree`1.Merge``1(MyDatastructure.PriorityQueue.HatinaryTree{``0},MyDatastructure.PriorityQueue.HatinaryTree{``0})">
            <summary>
            Extenstion method, Merge.
            </summary>
            <typeparam name="R"></typeparam>
            <param name="tis"></param>
            <param name="that"></param>
            <exception cref="T:MyDatastructure.InvalidArgumentException">
            Thrown when merging 2 Btree with different rank.
            </exception>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.HatinaryTree`1.Expand">
            <summary>
            Method will remove the root nodes of the tree and return
            a new array of trees for merging in the heap, with the size of rank.
            <para>
             It will not modifiy the current tree. </para>
            </summary>
            <returns>
            Null is returned in the current tree is rank 0.
            </returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.HatinaryTree`1.Merge(MyDatastructure.PriorityQueue.HatinaryTree{`0})">
             <summary>
            Merge 2 Btree with the same rank. It will not modify any of the tree, it
            will return a new reference to the merged new tree.
             <exception>
             Can not merge tree with 2 different rank.
             </exception>
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyDatastructure.PriorityQueue.HatinaryTree`1.ToString" -->
        <member name="T:MyDatastructure.PriorityQ.IPriorityQ`1">
            <summary>
            this is an interface for priorityqueue.
            </summary>
        </member>
        <member name="P:MyDatastructure.PriorityQ.IPriorityQ`1.Size">
            <summary>
            Returned current size of the queue, if the queue allows repeating elements, then 
            it returns the count of element including the repetition. 
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.Contains(`0)">
            <summary>
            Return true or false if the current element is in the queue. 
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.Enqueue(`0)">
            <summary>
            Equeue the element into the queue. 
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.Peek">
            <summary>
            Get an reference from the first element in the queue. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.Remove(`0)">
            <summary>
            Remove the element from the queue. 
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.RemoveMin">
            <summary>
            Remove and get a reference of the first memeber of the queue. 
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:MyDatastructure.MyLittleArrayHeapPriorityQueue`1">
            <summary>
            This is a min heap using 4 children heap structure.
            <para>
            - Null elements are not allowed in this datastructure.
            </para>
            </summary>
            <typeparam name="T">
            T as a comparable Type for the class.
            </typeparam>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.ArrayHeap">
            <summary>
            The array that stores the heap structure inside. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.CustomizedComparer">
            <summary>
            The comparer set by the client, null by default if client didn't set it. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.ElementCount">
            <summary>
            The number of elements in the heap, including the repetition.
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Frequencies">
            <summary>
            A int[] where if the element in the array heap, then the same index in the Frequencies 
            array is the frequencies of that element. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.HeapChildrenCount">
            <summary>
            The number of children that each parent has in the heap. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Indices">
            <summary>
            A map that stores all the index of the element in the heap array. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.UniqueElementCount">
            <summary>
            The number of unique elements in the array, it's for manaing the heap. 
            </summary>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.#ctor(MyDatastructure.Maps.IMap{`0,System.Int32},System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct an istance of the The array Heap. 
            </summary>
            <param name="IndexMap">
            The type of Maps inplementations you want for storing the 
            index of element interally. This greatly affects speed. 
            </param>
            <param name="heapchildrecount">
            Change the number of children each parent has. larger than 1.
            </param>
            <param name="initialHeapSize">
            The initial size of the heap array. 
            </param>
            <param name="comparer">
            The comparer you want to use for the element.
            </param>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.#ctor">
            <summary>
            Construct an instance of the MyLittleArrayHeapPriorityQueue.
            </summary>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct an instance of the MyLittleArrayHeapPriorityQueue.
            </summary>
            <param name="arg">
            The Comparer you want to use for ordering elements. 
            </param>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.ArrayElementSwapHelper``1(System.Int32,System.Int32,``0[])">
            <summary>
            A helper methods that swaps any array.
            </summary>
            <typeparam name="R"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <param name="arr"></param>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.BuildHeap``1(``0[])">
            <summary>
            it will use Floyd buildheap algorithm, it will not modify the inputs.
            </summary>
            <return>
            A new heap that made from the Floyd Buildheap Algorithm.
            </return>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an element in to the queue. Element cannot be repeated nor it can be
            null.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Peek">
            <summary>
            Get a reference for the first element in the queue. 
            </summary>
            <returns>
            a reference for the first element in the queue. 
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Remove(`0)">
            <summary>
            Null is not welcome in this queue.
            </summary>
            <param name="arg"></param>
            <Exception>
            Illegal argument exception if given argument with dafault value, or the element
            is not already presented in the queue.
            </Exception>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.RemoveMin">
            <summary>
            Remove the smallest element from the priority queue.
            </summary>
            <returns>
            Reference to the smaller element in the queue.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.AutomaticResize">
            <summary>
            Check the last element in the array and satruation to see if there is the need
            for resizing.
            </summary>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.CallCompare(`0,`0)">
            <summary>
            arg1.Compareto(arg2)
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.GetFirstChildIndex(System.Int32)">
            <summary>
            Get the first index of the heap. Internal use only. 
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.GetParentIndex(System.Int32)">
            <summary>
            Return the index of the parent of the element at the current index in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Percolate(System.Int32)">
            <summary>
            Percolate the element up, or down.
            </summary>
            <param name="arg"></param>
            <returns>
            The index which the element ended up with.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.PercolateDown(System.Int32,System.Boolean)">
            <summary>
            Percolate the element down and return the index that it ended up to.
            </summary>
            <param name="arg"></param>
            <param name="heapbuilding">
            True if the method is called under the context of floyd build heap. 
            </param>
            <returns>
            The final place in the heap that the element ended up to.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.PercolateUp(System.Int32)">
            <summary>
            Returns the new index that the elements has been percolated up to.
            </summary>
            <param name="arg"></param>
            <returns>
            The index that the element got ended up with.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Register(`0)">
             <summary>
            
             </summary>
             <param name="arg"></param>
             <returns>
             True if the element is NEW! (Yes, percolate, add it to the index map! )
             </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Resign(`0)">
            <summary>
            remove or decrement the element from the Frequency map.
            </summary>
            <param name="arg"></param>
            <returns>
            True if the element should be removed from the index map too.
            Else false.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Swap(System.Int32,System.Int32,System.Boolean)">
             <summary>
             Swap 2 elements in the heap array. It will update all things.
             </summary>
             <param name="arg1"></param>
             <param name="buildheapmode">True if it's called by buildheap method</param>
             <param name="arg2"></param>
             
            
        </member>
        <member name="T:MyDatastructure.Sorting.EquestriaCreatures">
            <summary>
            It's for demonstrating/ testing hybrid comparer.
            </summary>
        </member>
        <member name="T:MyDatastructure.Sorting.HybridComparer`1">
            <summary>
            Takes in a list of unique comparers.
            And compare then one by one。
            This is an OOP Approach for a robust Sorting system.
            </summary>
        </member>
        <member name="M:MyDatastructure.Sorting.HybridComparer`1.#ctor(System.Collections.Generic.IComparer{`0}[])">
            <summary>
            Create an instance of the hybrid comparer using other different kinds of IComparer
            of that type.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MyDatastructure.Sorting.HybridComparer`1.#ctor(MyDatastructure.Sorting.GenericCompare{`0}[])">
            <summary>
            Create an instance of the HybridComparer.
            </summary>
            <param name="args">
            A list of delegate, GenericCompare is defined in this name space. 
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyDatastructure.Sorting.HybridComparer`1.Compare(`0,`0)" -->
        <member name="T:MyDatastructure.Sorting.HybridStableComparer`1">
            <summary>
            This class takes into the the position of the element in the array into account.
            </summary>
        </member>
        <member name="T:MyDatastructure.Sorting.TopAndBottomSort`1">
            <summary>
            A better version of Top K sort, it find the top and bottom N-k, k element 
            from a list of comparable, it will also remember the min and the max too, 
            on average, close to O(N log(K)) performace. 
            
            It will not modified the original structure. 
            </summary>
        </member>
        <member name="F:MyDatastructure.Sorting.TopAndBottomSort`1.MiddleBody">
            <summary>
            All elements less than the K th max element and 
            larger than the Kth element. 
            </summary>
        </member>
        <member name="M:MyDatastructure.Sorting.TopAndBottomSort`1.#ctor(System.Int32,`0[])">
            <summary>
            Only Support K, on number, symmetric. 
            It will not modify the array. 
            </summary>
            <param name="K">
            The number of top and bottom you want from the data set. 
            </param>
            <param name="arr">
            The random number of comparable you prepared.   
            </param>
        </member>
        <member name="M:MyDatastructure.Sorting.TopAndBottomSort`1.Compute">
            <summary>
            Comput all things and add then to the field of the class. 
            </summary>
        </member>
        <member name="T:MyDatastructure.UnionFind.ArrayDisjointSet`1">
            <summary>
            Disjoint set implemented by forest in array. 
            </summary>
        </member>
        <member name="M:MyDatastructure.UnionFind.ArrayDisjointSet`1.CreateSet(`0)">
            <summary>
            Element can not be null. 
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:MyDatastructure.UnionFind.ArrayDisjointSet`1.IsSameSet(`0,`0)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            True if both of the element are joined to the same set. 
            </returns>
        </member>
        <member name="M:MyDatastructure.UnionFind.ArrayDisjointSet`1.Join(`0,`0)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.CreateSet(`0)">
            <summary>
            Register the element its own set. 
            If a already in it, then do nothing. 
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.Join(`0,`0)">
            <summary>
            Join 2 elements into the same set. 
            - if they are already in it, do nothing.
            - if any one of them are not in the set, throw exception.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.FindSet(`0)">
            <summary>
            Return the integer representative of a set. 
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.IsSameSet(`0,`0)">
            <summary>
            True if they are in the samne set. 
            - All element is in the same set as itself. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.GetRepresentative(`0)">
            <summary>
            Return the representative of the element. 
            - If the element is registered yet, throw exception.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
    </members>
</doc>
